/**
* PLDA (Polynomial long division algorithm) over GF(p)
*
* @param n(x) a polynomial 
* @param d(x) a non-zero polynomial 
* @param p a prime number 
*
* @return quotient q(x) and remainder r(x) such that n(x) = q(x)*d(x) + r(x) mod p where deg(r(x)) < deg(d(x))
*/
	PLDA(n(x), d(x))
		n(x) = n(x) mod p // perform mod p to every coefficient of n(x)
		d(x) = d(x) mod p // perform mod p to every coefficient of d(x) 
		(q(x), r(x)) <- (0, n(x))            
		while r(x) != 0 and deg(r(x)) >= deg(d(x)) do
			t(x) <- lead(r(x))/lead(d(x))	
				/*  
				 *  lead() returns the leading term of a polynomial; the division requires EEA. 
				 *  E.g. if r(x) = 2x^2 + x + 1, d(x) = 3x + 2, and p = 7,   
				 *  then lead(r(x)) = 2x^2, lead(d(x)) = 3x,
				 *  thus t(x) = 2x^2/3x = (2/3)(x^2/x) = 3x, 
				 *  here it needs EEA to compute 2/3 mod 7 = 3.
				 */
			(q(x), r(x)) <- (q(x) + t(x) mod p, r(x) - t(x)*d(x) mod p)			
		return (q(x), r(x))

	
/** 
* EEAP (Extended Euclidean Algorithm for Polynomials) over GF(p)
*
* @param a(x) a polynomial  
* @param b(x) another polynomial
* @param p a prime number   
*
* @return polynomial array (u(x),v(x)) satisfying u(x)*a(x) + v(x)*b(x) = gcd(a(x),b(x)) mod p
*/
	EEAP(a(x), b(x))
		a(x) = a(x) mod p // perform mod p to the coefficients of a(x)
		b(x) = b(x) mod p // perform mod p to the coefficients of b(x)
		if b(x) = 0 then
			return (1/(leading coefficient of a(x)), 0) // gcd(a(x),0) should be monic 
		else
			Q = PLDA(a(x), b(x))
			q(x) = Q[0] and r(x) = Q[1]
			R = EEAP(b(x), r(x))			
			return (R[1] mod p, R[0]-q*R[1] mod p)        
